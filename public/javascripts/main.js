// Generated by CoffeeScript 1.6.2
var bgImages, byId, c, ch, checkUsername, count, getBgImage, getCaretPosition, hide, jsonp, kb, kbfull, ltmp, noop, setCaretPosition, show, showrl, signin, signup, tmp, trim, unameFocused, valid, _i, _j, _k, _len, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

bgImages = [[1024, 768], [1280, 720], [1280, 800], [1280, 1024], [1366, 768], [1440, 900], [1600, 900], [1600, 1200], [1680, 1050], [1920, 1080], [1920, 1200], [2560, 1600]];

getBgImage = function() {
  var bg, wh, _i, _len;

  bg = bgImages[0];
  for (_i = 0, _len = bgImages.length; _i < _len; _i++) {
    wh = bgImages[_i];
    if (wh[0] === screen.width) {
      bg = wh;
      if (wh[1] === screen.height) {
        return wh;
      }
    }
  }
  return bg;
};

document.documentElement.style.backgroundImage = 'url(images/bg/' + getBgImage().join('x') + '.jpg)';

byId = function(id) {
  if (typeof id === 'object') {
    return id;
  }
  return document.getElementById(id);
};

show = function(id) {
  return byId(id).style.display = '';
};

hide = function(id) {
  return byId(id).style.display = 'none';
};

trim = function(str) {
  if (str.trim != null) {
    return str.trim();
  } else {
    return str.replace(/^\s+|\s+$/g, '');
  }
};

showrl = function() {
  return show('rl');
};

checkUsername = function(len) {
  var lab;

  lab = byId('unamelab').children;
  hide(lab[1]);
  if (byId('uname').value.length < len) {
    return show(lab[0]);
  } else {
    return hide(lab[0]);
  }
};

kb = '';

kbfull = '';

tmp = [];

for (c = _i = 48; _i <= 57; c = ++_i) {
  tmp.push("<li>" + (String.fromCharCode(c)) + "</li>");
}

kbfull = tmp.join('');

tmp.shift();

kb = tmp.join('');

tmp = [];

ltmp = [];

for (c = _j = 97; _j <= 122; c = ++_j) {
  ch = String.fromCharCode(c);
  ltmp.push("<li>" + ch + "</li>");
  tmp.push("<li>" + (ch.toUpperCase()) + "</li>");
}

kb += ltmp.join('');

kbfull += ltmp.join('');

kbfull += tmp.join('');

ltmp = null;

tmp = [];

_ref = [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47].concat([58, 59, 60, 61, 62, 63, 64].concat([91, 92, 93, 94, 95, 96].concat([123, 124, 125, 126])));
for (_k = 0, _len = _ref.length; _k < _len; _k++) {
  c = _ref[_k];
  if (c === 95) {
    tmp.push("<li class=\"underscore\">" + (String.fromCharCode(c)) + "</li>");
  } else {
    tmp.push("<li>" + (String.fromCharCode(c)) + "</li>");
  }
}

kbfull += tmp.join('');

tmp = null;

(byId('kb')).innerHTML = '<ul>' + kb + '</ul>';

unameFocused = false;

(byId('uname')).onfocus = function() {
  unameFocused = true;
  if (this.value.length < 6) {
    show('unamelab');
  }
  return show('kb');
};

(byId('pwd')).onfocus = function() {
  return show('pwdlab');
};

(byId('pwd')).onblur = function() {
  return hide('pwdlab');
};

(byId('pwd')).onkeydown = function(e) {
  var len, _ref1;

  len = 7;
  if ((_ref1 = e.keyCode) === 8 || _ref1 === 46) {
    len = 9;
  }
  if (this.value.length < len) {
    show('pwdlab');
  } else {
    hide('pwdlab');
  }
  return true;
};

(byId('uname')).onkeydown = function(e) {
  var keyCode, pos, _l, _m, _results, _results1;

  keyCode = e.keyCode;
  console.log(keyCode);
  if (keyCode === 9 && trim(this.value).length > 5) {
    hide('unamelab');
    hide('kb');
    return true;
  }
  if (keyCode !== 8 && keyCode !== 35 && keyCode !== 36 && keyCode !== 37 && keyCode !== 39 && keyCode !== 46) {
    if (__indexOf.call((function() {
      _results = [];
      for (_l = 65; _l <= 90; _l++){ _results.push(_l); }
      return _results;
    }).apply(this), keyCode) >= 0 || __indexOf.call((function() {
      _results1 = [];
      for (_m = 97; _m <= 122; _m++){ _results1.push(_m); }
      return _results1;
    }).apply(this), keyCode) >= 0 || __indexOf.call([49, 50, 51, 52, 53, 54, 55, 56, 57], keyCode) >= 0) {
      checkUsername(5);
      pos = getCaretPosition(this);
      this.value = [this.value.slice(0, pos), String.fromCharCode(keyCode).toLowerCase(), this.value.slice(pos)].join('');
      setCaretPosition(this, pos + 1);
    }
    return false;
  } else {
    if (keyCode === 8 || keyCode === 46) {
      return checkUsername(7);
    }
  }
};

document.onclick = function(e) {
  var id, tag, uname;

  uname = byId('uname');
  if (unameFocused && trim(uname.value).length < 6) {
    uname.focus();
    return false;
  }
  id = e.target.id || '';
  tag = e.target.tagName.toLowerCase();
  if (tag === 'input' && id !== 'uname') {
    hide('unamelab');
    hide('kb');
    unameFocused = false;
  }
  return true;
};

(byId('kb')).onclick = function(e) {
  var pos, uname;

  checkUsername(5);
  uname = byId('uname');
  if (e.target.tagName.toLowerCase() === 'li') {
    pos = getCaretPosition(uname);
    uname.value = [uname.value.slice(0, pos), trim(e.target.innerHTML), uname.value.slice(pos)].join('');
    setCaretPosition(uname, pos + 1);
  }
  return uname.focus();
};

valid = function() {
  var password, username;

  username = trim(byId('username').value);
  password = byId('password').value;
  if (!(/^[a-z1-9]{6,}$/.test(username) && password.length > 7)) {
    byId('signin_return').innerHTML = '<div class="re">Please enter the correct username & password!</div>';
    show('signin_return');
    return false;
  } else {
    byId('signin_return').innerHTML = '';
    hide('signin_return');
    return true;
  }
};

signin = function() {
  var u;

  if (!valid()) {
    return;
  }
  show('loader');
  u = ['/signin?1=', byId('username').value, '&2=', encodeURIComponent(byId('password').value), '&3=', byId('remember').value];
  return jsonp(u.join(''), function(err, data) {
    var signin_return;

    if (err != null) {
      return byId('loader').innerHTML = 'Timeout, please resubmit.';
    } else {
      if (data.error != null) {
        hide('loader');
        signin_return = byId('signin_return');
        signin_return.innerHTML = data.error;
        return show(signin_return);
      } else {
        byId('loader').innerHTML = 'Submitted successfully, now jump to ...';
        return window.location = '/jump';
      }
    }
  });
};

signup = function() {
  var pwd, u, uname;

  pwd = byId('pwd');
  uname = byId('uname');
  if (uname.value.length < 6) {
    uname.focus();
    return false;
  } else if (pwd.value.length < 8) {
    pwd.focus();
    return false;
  } else {
    show('loader');
    u = ['/signup?1=', encodeURIComponent(byId('fname').value), '&2=', encodeURIComponent(byId('lname').value), '&3=', uname.value, '&4=', encodeURIComponent(pwd.value), '&5=', byId('rem').value];
    return jsonp(u.join(''), function(err, data) {
      var signup_return;

      if (err != null) {
        return byId('loader').innerHTML = 'Timeout, please resubmit.';
      } else {
        hide('loader');
        if (data.error != null) {
          signup_return = byId('signup_return');
          signup_return.innerHTML = data.error;
          return show(signup_return);
        }
      }
    });
  }
};

/*
* Callback index.
*/


count = 0;

/*
* Noop function.
*/


noop = function() {};

/*
* JSONP handler
*
* Options:
* - param {String} qs parameter (`callback`)
* - timeout {Number} how long after a timeout error is emitted (`60000`)
*
* @param {String} url
* @param {Object|Function} optional options / callback
* @param {Function} optional callback
*/


jsonp = function(url, opts, fn) {
  var cleanup, enc, id, param, script, target, timeout, timer;

  if ('function' === typeof opts) {
    fn = opts;
    opts = {};
  }
  param = opts.param, timeout = opts.timeout;
  param = param || 'callback';
  timeout = timeout || 60000;
  enc = encodeURIComponent;
  target = document.getElementsByTagName('script')[0];
  id = count++;
  if (timeout) {
    timer = setTimeout((function() {
      cleanup();
      return fn && fn(new Error('Timeout'));
    }), timeout);
  }
  cleanup = function() {
    script.parentNode.removeChild(script);
    return window['__jp' + id] = noop;
  };
  window['__jp' + id] = function(data) {
    console.log('jsonp got', data);
    if (timer) {
      clearTimeout(timer);
    }
    cleanup();
    return fn && fn(null, data);
  };
  url += (url.indexOf('?') > -1 ? '&' : '?') + param + '=' + enc('__jp' + id + '');
  url = url.replace('?&', '?');
  console.log('jsonp req "%s"', url);
  script = document.createElement('script');
  script.src = url;
  return target.parentNode.insertBefore(script, target);
};

/*

** Returns the caret (cursor) position of the specified text field.
** Return value range is 0-oField.value.length.
*/


getCaretPosition = function(oField) {
  var iCaretPos, oSel;

  iCaretPos = 0;
  if (document.selection) {
    oField.focus();
    oSel = document.selection.createRange();
    oSel.moveStart('character', -oField.value.length);
    iCaretPos = oSel.text.length;
  } else if (oField.selectionStart || oField.selectionStart.toString() === '0') {
    iCaretPos = oField.selectionStart;
  }
  return iCaretPos;
};

setCaretPosition = function(el, caretPos) {
  var range;

  if (el.createTextRange != null) {
    range = el.createTextRange();
    range.move('character', caretPos);
    return range.select();
  } else {
    if (el.selectionStart) {
      el.focus();
      return el.setSelectionRange(caretPos, caretPos);
    } else {
      return elem.focus();
    }
  }
};
